import sys
import os
from collections import namedtuple
from typing import NamedTuple

sys.path.append(os.path.abspath(os.path.dirname(__file__) + '/../..'))

from analysis_utils.ys_timestamps import Ys_Timestamp, print_timestamps_summary, print_avg_min_max, null_timestamp, generic_field_parser

timestamp_dict = {
    "BRYG1101": ["00:00:03.133", "00:00:03.433", "00:00:03.533",
                 [("f/x/p/k", "00:00:04.468"), ("f/s", null_timestamp), ("f/h", "00:00:04.752"), ("f/d", "00:00:04.852"),
                  ("p/s", "00:00:04.918"), ("x/s", "00:00:05.018"),
                  ("p/h", "00:00:05.085"), ("p/d", "00:00:05.185"), ("x/h", null_timestamp), ("x/d", "00:00:05.285"),
                  ("f/k", "00:00:06.085"), ("f/s", null_timestamp), ("f/h", "00:00:06.335"), ("f/d", "00:00:06.518"),
                  ("f/x/k", "00:00:07.685"), ("f/s", null_timestamp), ("f/h", "00:00:07.918"), ("f/d", "00:00:08.085"),
                  ("x/s", "00:00:08.252"), ("x/h", "00:00:08.418"), ("x/d", "00:00:08.585"), ("f/k", "00:00:09.285"),
                  ("f/s", "00:00:09.568"), ("f/h", "00:00:09.635"), ("p/k", "00:00:09.685"), ("f/d", "00:00:09.785"),
                  ("p/s", "00:00:10.035"), ("p/h", "00:00:10.385"), ("p/d", "00:00:10.568"), ("f/k", "00:00:10.868"),
                  ("x/k", "00:00:10.968"), ("f/s", "00:00:11.168"), ("f/h", "00:00:11.285"), ("f/d", "00:00:11.452"),
                  ("x/s", "00:00:11.518"), ("x/h", "00:00:11.718"), ("x/d", "00:00:11.802"), ("f/k", "00:00:12.503"),
                  ("f/s", "00:00:12.720"), ("f/h", "00:00:12.887"), ("f/d", "00:00:13.053"), ("f/k", "00:00:14.020"),
                  ("x/k", "00:00:14.220"), ("f/s", "00:00:14.287"), ("f/h", "00:00:14.470"), ("f/d", "00:00:14.637"),
                  ("p/k", "00:00:14.720"), ("x/s", "00:00:14.770"), ("x/h", "00:00:14.970"), ("x/d", "00:00:15.070"),
                  ("p/s", "00:00:15.187"), ("p/h", "00:00:15.520"), ("f/k", "00:00:15.570"), ("p/d", "00:00:15.620"),
                  ("f/s", "00:00:15.853"), ("f/h", "00:00:16.103"), ("f/d", "00:00:16.270"), ("f/k", "00:00:17.153"),
                  ("x/k", "00:00:17.520"), ("f/s", "00:00:17.437"), ("f/h", "00:00:17.653"), ("f/d", "00:00:17.820"),
                  ("x/s", "00:00:18.020"), ("x/h", "00:00:18.237"), ("x/d", "00:00:18.420"), ("f/k", "00:00:18.820"),
                  ("f/s", "00:00:19.037"), ("f/h", "00:00:19.220"), ("f/d", "00:00:19.320"), ("p/k", "00:00:19.987"),
                  ("f/k", "00:00:20.253"), ("p/s", "00:00:20.388"), ("p/h", "00:00:20.705"), ("f/s", "00:00:20.538"),
                  ("f/h", null_timestamp), ("p/d", "00:00:20.805"), ("f/d", "00:00:20.905"), ("x/k", "00:00:20.672"),
                  ("x/s", "00:00:21.222"), ("x/h", "00:00:21.405"), ("x/d", "00:00:21.572"), ("f/k", "00:00:21.838"),
                  ("f/s", "00:00:22.072"), ("f/h", "00:00:22.238"), ("f/d", "00:00:22.338"), ("f/k", "00:00:23.355"),
                  ("f/s", "00:00:23.638"), ("f/h", "00:00:23.805"), ("x/k", "00:00:23.905"), ("f/d", "00:00:23.905"),
                  ("x/s", "00:00:24.455"), ("x/h", "00:00:24.638"), ("x/d", "00:00:24.772"), 
                  ("f/s", "00:00:25.238"), ("f/h", "00:00:25.388"), ("f/d", "00:00:25.572"), 
                  ("p/s", "00:00:25.505"), ("p/h", "00:00:25.922"), ("p/d", "00:00:26.022"),
                  ("f/s", "00:00:26.822"), ("f/h", "00:00:26.972"), ("f/d", "00:00:27.138"), 
                  ("x/s", "00:00:27.722"), ("x/h", "00:00:27.872"), ("x/d", "00:00:28.038"), 
                  ("f/s", "00:00:28.390"), ("f/h", "00:00:28.573"), ("f/d", "00:00:28.740"),
                  ("f/s", "00:00:29.940"), ("f/h", "00:00:30.090"), ("f/d", "00:00:30.223"), 
                  ("p/s", "00:00:30.657"), ("p/h", "00:00:31.007"), ("p/d", "00:00:31.107"), 
                  ("x/s", "00:00:30.990"), ("x/h", "00:00:31.173"), ("x/d", "00:00:31.357"),
                  ("f/s", "00:00:31.540"), ("f/h", "00:00:31.707"), ("f/d", "00:00:31.873")
                  ]],
    "DYEY0345": ["00:00:02.817", "00:00:03.117", "00:00:03.183",
                 [("f/k", "00:00:04.152"), ("x/k", "00:00:04.185"), ("p/k", "00:00:04.235"), ("f/s", "00:00:04.402"),
                  ("f/h", "00:00:04.418"), ("f/d", "00:00:04.602"), ("x/s", "00:00:04.702"), ("p/s", "00:00:04.685"),
                  ("x/h", "00:00:04.785"), ("p/h", "00:00:04.818"), ("x/d", "00:00:04.902"), ("p/d", "00:00:05.002"),
                  ("f/k", "00:00:05.685"), ("f/s", "00:00:05.918"), ("f/h", "00:00:05.935"), ("f/d", "00:00:06.085"), 
                  ("f/k", "00:00:07.185"), ("x/k", "00:00:07.402"), ("f/h", "00:00:07.452"), ("f/d", "00:00:07.652"),
                  ("x/s", "00:00:07.952"), ("x/h", "00:00:08.152"), ("x/d", "00:00:08.302"), ("f/k", "00:00:08.802"),
                  ("f/h", "00:00:09.118"), ("f/d", "00:00:09.352"), ("p/k", "00:00:09.485"), ("p/h", "00:00:10.218"),
                  ("p/d", "00:00:10.385"), ("f/k", "00:00:10.385"), ("f/s", "00:00:10.668"), ("x/k", "00:00:10.685"),
                  ("f/h", "00:00:10.718"), ("f/d", "00:00:10.902"), ("x/s", "00:00:11.185"), ("x/h", "00:00:11.352"),
                  ("x/d", "00:00:11.485"), ("f/k", "00:00:11.918"), ("f/s", "00:00:12.168"), ("f/h", "00:00:12.268"),
                  ("f/d", "00:00:12.420"), ("f/k", "00:00:13.453"), ("f/s", "00:00:13.737"), ("f/h", "00:00:13.853"),
                  ("x/k", "00:00:13.920"), ("f/d", "00:00:14.003"), ("x/s", "00:00:14.437"), ("x/h", "00:00:14.587"),
                  ("p/k", "00:00:14.653"), ("x/d", "00:00:14.753"), ("f/k", "00:00:15.020"), ("f/s", "00:00:15.320"),
                  ("p/h", "00:00:15.403"), ("p/d", "00:00:15.503"), ("f/d", "00:00:15.603"), ("f/k", "00:00:16.687"),
                  ("f/s", "00:00:16.920"), ("f/h", "00:00:17.120"), ("x/k", "00:00:17.153"), ("f/d", "00:00:17.220"),
                  ("x/s", "00:00:17.637"), ("x/h", "00:00:17.820"), ("x/d", "00:00:17.920"), ("f/k", "00:00:18.220"),
                  ("f/s", "00:00:18.487"), ("f/h", "00:00:18.670"), ("f/d", "00:00:18.803"), ("f/p/k", "00:00:19.737"),
                  ("f/s", "00:00:20.020"), ("f/h", "00:00:20.253"), ("f/d", "00:00:20.388"), ("p/h", "00:00:20.555"),
                  ("p/d", "00:00:20.672"), ("x/k", "00:00:20.372"), ("x/s", "00:00:20.922"), ("x/h", "00:00:21.122"),
                  ("x/d", "00:00:21.288"), ("f/k", "00:00:21.288"), ("f/s", "00:00:21.572"), ("f/h", "00:00:21.838"),
                  ("f/d", "00:00:22.005"), ("f/k", "00:00:22.822"), ("f/s", "00:00:23.122"), ("f/h", "00:00:23.422"),
                  ("f/d", "00:00:23.588"), ("x/s", "00:00:24.138"), ("x/h", "00:00:24.255"), ("x/d", "00:00:24.355"),
                  ("f/s", "00:00:24.688"), ("f/h", "00:00:24.972"), ("f/d", "00:00:25.122"), ("p/h", "00:00:25.672"),
                  ("p/d", "00:00:25.788"), ("f/s", "00:00:26.288"), ("f/h", "00:00:26.555"), ("f/d", "00:00:26.722"),
                  ("x/s", "00:00:27.405"), ("x/h", "00:00:27.505"), ("x/d", "00:00:27.672"), ("f/s", "00:00:27.838"), 
                  ("f/h", "00:00:28.105"), ("f/d", "00:00:28.288"), ("f/s", "00:00:29.523"), ("f/h", "00:00:29.790"),
                  ("f/d", "00:00:29.923"), ("x/s", "00:00:30.707"), ("p/h", "00:00:30.857"), ("x/h", "00:00:30.907"),
                  ("x/p/d", "00:00:31.007"), ("f/s", "00:00:31.057"),("f/h", "00:00:31.307"), ("f/d", "00:00:31.507")
                 ]],
    "FPJY3967": ["00:00:03.742", "00:00:04.042", "00:00:04.143",
                 [("f/k", "00:00:05.143"), ("x/p/k", "00:00:05.243"), ("f/h", "00:00:05.393"), ("f/d", "00:00:05.560"),
                  ("p/s", "00:00:05.693"), ("x/s", "00:00:05.793"), ("p/h", "00:00:05.927"), ("x/h", "00:00:05.943"),
                  ("x/p/d", "00:00:06.060"), ("f/k", "00:00:06.660"), ("f/h", "00:00:06.960"), ("f/d", "00:00:07.043"),
                  ("f/k", "00:00:08.260"), ("f/s", "00:00:08.493"), ("f/h", "00:00:08.543"), ("x/k", "00:00:08.593"),
                  ("f/d", "00:00:08.660"), ("x/s", "00:00:09.110"), ("x/h", "00:00:09.293"), ("x/d", "00:00:09.443"),
                  ("f/k", "00:00:09.743"), ("f/s", "00:00:10.010"), ("f/h", "00:00:10.093"), ("f/d", "00:00:10.210"),
                  ("p/k", "00:00:10.393"), ("p/h", "00:00:11.160"), ("p/d", "00:00:11.343"), ("f/k", "00:00:11.443"),
                  ("f/h", "00:00:11.760"), ("x/k", "00:00:11.827"), ("f/d", "00:00:11.927"), ("x/s", "00:00:12.362"),
                  ("x/h", "00:00:12.528"), ("x/d", "00:00:12.645"), ("f/k", "00:00:13.062"), ("f/s", "00:00:13.245"),
                  ("f/h", "00:00:13.412"), ("f/d", "00:00:13.578"), ("f/k", "00:00:14.595"), ("f/s", "00:00:14.828"),
                  ("f/h", "00:00:15.028"), ("x/k", "00:00:15.095"), ("f/d", "00:00:15.212"), ("p/k", "00:00:15.528"), ("x/s", "00:00:15.662"),
                  ("x/h", "00:00:15.862"), ("x/d", "00:00:15.978"), ("p/s", "00:00:15.962"), ("p/h", "00:00:16.345"),
                  ("p/d", "00:00:16.478"), ("f/k", "00:00:16.212"), ("f/s", "00:00:16.445"), ("f/h", "00:00:16.612"),
                  ("f/d", "00:00:16.778"), ("f/k", "00:00:17.745"), ("f/s", "00:00:18.028"), ("f/h", "00:00:18.228"),
                  ("f/d", "00:00:18.345"), ("x/k", "00:00:18.428"), ("x/s", "00:00:18.928"), ("x/h", "00:00:19.145"),
                  ("x/d", "00:00:19.245"), ("f/k", "00:00:19.378"), ("f/s", "00:00:19.628"), ("f/h", "00:00:19.845"),
                  ("f/d", "00:00:19.945"), ("p/k", "00:00:20.730"), ("f/k", "00:00:21.013"), ("p/s", "00:00:21.180"),
                  ("f/s", "00:00:21.247"), ("f/h", "00:00:21.447"), ("p/h", "00:00:21.513"), ("f/d", "00:00:21.597"),
                  ("p/d", "00:00:21.663"), ("x/k", "00:00:21.663"), ("x/s", "00:00:22.230"), ("x/h", "00:00:22.413"),
                  ("x/d", "00:00:22.547"), ("f/k", "00:00:22.547"), ("f/s", "00:00:22.830"), ("f/h", "00:00:23.063"),
                  ("f/d", "00:00:23.163"), ("f/k", "00:00:24.163"), ("f/s", "00:00:24.413"), ("f/h", "00:00:24.697"),
                  ("f/d", "00:00:24.830"), ("x/k", "00:00:24.997"), ("x/h", "00:00:25.647"), ("x/d", "00:00:25.747"),
                  ("f/s", "00:00:25.947"), ("f/h", "00:00:26.230"), ("f/d", "00:00:26.363"), ("p/h", "00:00:26.680"),
                  ("p/d", "00:00:26.847"), ("f/s", "00:00:27.547"), ("f/h", "00:00:27.847"), ("f/d", "00:00:27.963"),
                  ("x/s", "00:00:28.882"), ("x/d", "00:00:29.032"), ("f/s", "00:00:29.098"), ("f/h", "00:00:29.365"),
                  ("f/d", "00:00:29.482"), ("f/s", "00:00:30.665"), ("f/h", "00:00:30.948"), ("f/d", "00:00:31.148"),
                  ("p/h", "00:00:31.832"), ("p/d", "00:00:31.998"), ("x/s", "00:00:32.032"), ("f/s", "00:00:32.165"),
                  ("x/h", "00:00:32.182"), ("x/d", "00:00:32.282"), ("f/h", "00:00:32.432"), ("f/d", "00:00:32.565"),
                  ]],
    "JAHZ9620": ["00:00:02.933", "00:00:03.233", "00:00:03.300",
                 [("f/x/p/k", "00:00:04.368"), ("f/h", "00:00:04.635"), ("f/d", "00:00:04.735"), ("p/s", "00:00:04.835"),
                  ("x/s", "00:00:04.935"), ("x/p/h", "00:00:05.002"), ("p/d", "00:00:05.102"), ("x/d", "00:00:05.202"),
                  ("f/k", "00:00:05.935"), ("f/h", "00:00:06.202"), ("f/d", "00:00:06.385"), ("f/k", "00:00:07.552"),
                  ("x/k", "00:00:07.635"), ("f/s", "00:00:07.802"), ("f/h", "00:00:07.818"), ("f/d", "00:00:08.002"),
                  ("x/s", "00:00:08.202"), ("x/h", "00:00:08.385"), ("x/d", "00:00:08.485"), ("f/k", "00:00:09.052"),
                  ("f/s", "00:00:09.335"), ("f/h", "00:00:09.402"), ("f/d", "00:00:09.535"), ("p/k", "00:00:09.535"),
                  ("p/s", "00:00:09.952"), ("p/h", "00:00:10.268"), ("p/d", "00:00:10.435"), ("f/k", "00:00:10.635"),
                  ("f/s", "00:00:10.885"), ("x/k", "00:00:10.935"), ("f/h", "00:00:10.985"), ("f/d", "00:00:11.085"),
                  ("x/s", "00:00:11.502"), ("x/h", "00:00:11.685"), ("x/d", "00:00:11.835"), ("f/k", "00:00:12.203"),
                  ("f/s", "00:00:12.487"), ("f/h", "00:00:12.603"), ("f/d", "00:00:12.753"), ("f/k", "00:00:13.903"),
                  ("f/s", "00:00:14.087"), ("f/h", "00:00:14.253"), ("f/d", "00:00:14.353"), ("x/k", "00:00:14.270"),
                  ("p/k", "00:00:14.653"), ("x/s", "00:00:14.770"), ("x/h", "00:00:14.953"), ("p/s", "00:00:15.070"),
                  ("x/d", "00:00:15.103"), ("p/h", "00:00:15.437"), ("f/k", "00:00:15.420"), ("p/d", "00:00:15.620"),
                  ("f/s", "00:00:15.637"), ("f/h", "00:00:15.837"), ("f/d", "00:00:15.970"), ("f/s", "00:00:17.187"),
                  ("f/h", "00:00:17.387"), ("x/k", "00:00:17.420"), ("f/d", "00:00:17.487"), ("x/s", "00:00:17.987"),
                  ("x/h", "00:00:18.153"), ("x/d", "00:00:18.337"), ("f/k", "00:00:18.537"), ("f/s", "00:00:18.753"),
                  ("f/h", "00:00:18.937"), ("f/d", "00:00:19.103"), ("p/k", "00:00:19.888"), ("f/k", "00:00:20.088"),
                  ("p/s", "00:00:20.272"), ("f/s", "00:00:20.305"), ("f/h", "00:00:20.455"), ("f/d", "00:00:20.555"),
                  ("p/h", "00:00:20.622"), ("x/k", "00:00:20.655"), ("p/d", "00:00:20.738"), ("x/s", "00:00:21.188"),
                  ("x/h", "00:00:21.355"), ("x/d", "00:00:21.522"), ("f/k", "00:00:21.638"), ("f/s", "00:00:21.888"),
                  ("f/h", "00:00:22.072"), ("f/d", "00:00:22.172"), ("f/k", "00:00:23.222"), ("f/s", "00:00:23.455"),
                  ("f/h", "00:00:23.688"), ("f/d", "00:00:23.872"), ("x/k", "00:00:23.955"), ("x/s", "00:00:24.488"),
                  ("x/h", "00:00:24.688"), ("x/d", "00:00:24.855"), ("f/s", "00:00:25.022"), ("f/h", "00:00:25.272"),
                  ("f/d", "00:00:25.372"), ("p/h", "00:00:25.738"), ("p/d", "00:00:25.838"), ("f/s", "00:00:26.572"),
                  ("f/h", "00:00:26.855"), ("f/d", "00:00:27.022"), ("x/s", "00:00:27.688"), ("x/h", "00:00:27.888"),
                  ("x/d", "00:00:28.023"), ("f/s", "00:00:28.123"), ("f/h", "00:00:28.440"), ("f/d", "00:00:28.573"),
                  ("f/s", "00:00:29.757"), ("f/h", "00:00:30.090"), ("f/d", "00:00:30.190"), ("p/s", "00:00:30.540"),
                  ("p/h", "00:00:30.890"), ("x/s", "00:00:30.990"), ("x/h", "00:00:31.157"), ("f/s", "00:00:31.307"),
                  ("x/d", "00:00:31.323"), ("f/h", "00:00:31.673"), ("f/d", "00:00:31.857")
                  ]],
    "WRXW3609": ["00:00:04.268", "00:00:04.568", "00:00:04.685",
                 [("f/x/p/k", "00:00:05.585"), ("f/h", "00:00:05.868"), ("f/d", "00:00:05.968"), ("p/s", "00:00:06.035"),
                  ("x/s", "00:00:06.135"), ("x/p/h", "00:00:06.268"), ("x/p/d", "00:00:06.535"), ("f/k", "00:00:07.118"),
                  ("f/h", "00:00:07.402"), ("f/d", "00:00:07.502"), ("f/k", "00:00:08.752"), ("x/k", "00:00:08.835"),
                  ("f/h", "00:00:09.068"), ("f/d", "00:00:09.252"), ("x/s", "00:00:09.402"), ("x/h", "00:00:09.602"),
                  ("x/d", "00:00:09.735"), ("f/k", "00:00:10.335"), ("f/h", "00:00:10.685"), ("p/k", "00:00:10.702"),
                  ("f/d", "00:00:10.785"), ("p/s", "00:00:11.152"), ("p/h", "00:00:11.485"), ("p/d", "00:00:11.585"),
                  ("f/k", "00:00:11.968"), ("x/k", "00:00:12.168"), ("f/s", "00:00:12.152"), ("f/h", "00:00:12.287"),
                  ("f/d", "00:00:12.453"), ("x/s", "00:00:12.653"), ("x/h", "00:00:12.853"), ("x/d", "00:00:12.970"),
                  ("f/k", "00:00:13.470"), ("f/h", "00:00:13.903"), ("f/d", "00:00:14.087"), ("f/k", "00:00:15.120"),
                  ("x/k", "00:00:15.453"), ("f/h", "00:00:15.487"), ("f/d", "00:00:15.670"), ("x/s", "00:00:15.903"),
                  ("p/k", "00:00:15.953"), ("x/h", "00:00:16.120"), ("x/d", "00:00:16.220"), ("p/s", "00:00:16.320"),
                  ("p/h", "00:00:16.637"), ("f/k", "00:00:16.653"), ("p/d", "00:00:16.803"), ("f/h", "00:00:17.053"),
                  ("f/d", "00:00:17.237"), ("f/k", "00:00:18.237"), ("f/s", "00:00:18.487"), ("f/h", "00:00:18.670"),
                  ("x/k", "00:00:18.720"), ("f/d", "00:00:18.787"), ("x/s", "00:00:19.203"), ("x/h", "00:00:19.387"),
                  ("x/d", "00:00:19.520"), ("f/k", "00:00:19.803"), ("f/s", "00:00:20.070"), ("f/h", "00:00:20.270"),
                  ("f/d", "00:00:20.405"), ("p/k", "00:00:21.122"), ("f/k", "00:00:21.422"), ("p/s", "00:00:21.505"),
                  ("f/s", "00:00:21.655"), ("p/h", "00:00:21.822"), ("f/h", "00:00:21.872"), ("x/k", "00:00:21.922"),
                  ("p/d", "00:00:21.938"), ("f/d", "00:00:21.988"), ("x/s", "00:00:22.455"), ("x/h", "00:00:22.622"),
                  ("x/d", "00:00:22.788"), ("f/k", "00:00:22.988"), ("f/s", "00:00:23.238"), ("f/h", "00:00:23.422"),
                  ("f/d", "00:00:23.622"), ("f/k", "00:00:24.605"), ("f/s", "00:00:24.822"), ("f/h", "00:00:25.055"),
                  ("f/d", "00:00:25.172"), ("x/k", "00:00:25.255"), ("x/s", "00:00:25.738"), ("x/h", "00:00:25.922"),
                  ("x/d", "00:00:26.072"), ("f/s", "00:00:26.438"), ("p/s", "00:00:26.605"), ("f/h", "00:00:26.672"),
                  ("f/d", "00:00:26.838"), ("p/h", "00:00:26.972"), ("p/d", "00:00:27.155"), ("f/s", "00:00:28.005"),
                  ("f/h", "00:00:28.222"), ("f/d", "00:00:28.323"), ("x/s", "00:00:29.023"), ("x/h", "00:00:29.190"),
                  ("x/d", "00:00:29.357"), ("f/s", "00:00:29.607"), ("f/h", "00:00:29.840"), ("f/d", "00:00:29.940"),
                  ("f/s", "00:00:31.157"), ("f/h", "00:00:31.390"), ("f/d", "00:00:31.507"), ("p/s", "00:00:31.790"),
                  ("p/h", "00:00:32.157"), ("p/d", "00:00:32.307"), ("x/s", "00:00:32.340"), ("x/h", "00:00:32.557"),
                  ("x/d", "00:00:32.673"), ("f/s", "00:00:32.690"), ("f/h", "00:00:32.907"), ("f/d", "00:00:33.023"),
                  ]],
    "YCJK3782": ["00:00:03.567", "00:00:03.867", "00:00:03.917",
                 [("p/k", "00:00:04.885"), ("f/x/k", "00:00:04.985"), ("f/h", "00:00:05.268"), ("p/s", "00:00:05.352"),
                  ("f/d", "00:00:05.452"), ("p/h", "00:00:05.535"), ("x/s", "00:00:05.552"), ("x/h", "00:00:05.702"),
                  ("p/d", "00:00:05.702"), ("x/d", "00:00:05.802"), ("f/k", "00:00:06.618"), ("f/h", "00:00:06.885"), 
                  ("f/d", "00:00:07.018"), ("f/k", "00:00:08.185"), ("x/k", "00:00:08.268"), ("f/h", "00:00:08.452"),
                  ("f/d", "00:00:08.652"), ("x/s", "00:00:08.852"), ("x/h", "00:00:09.018"), ("x/d", "00:00:09.152"),
                  ("f/k", "00:00:09.818"), ("f/h", "00:00:10.085"), ("p/k", "00:00:10.152"), ("f/d", "00:00:10.252"),
                  ("p/s", "00:00:10.535"), ("p/h", "00:00:10.868"), ("p/d", "00:00:10.968"), ("f/k", "00:00:11.368"),
                  ("f/s", "00:00:11.568"), ("x/k", "00:00:11.568"), ("f/h", "00:00:11.652"), ("f/d", "00:00:11.752"),
                  ("x/s", "00:00:12.068"), ("x/h", "00:00:12.220"), ("x/d", "00:00:12.387"), ("f/k", "00:00:12.837"),
                  ("f/s", "00:00:13.103"), ("f/h", "00:00:13.203"), ("f/d", "00:00:13.387"), ("f/k", "00:00:14.387"),
                  ("f/s", "00:00:14.670"), ("x/k", "00:00:14.803"), ("f/h", "00:00:14.820"), ("f/d", "00:00:15.003"),
                  ("p/k", "00:00:15.270"), ("x/s", "00:00:15.270"), ("x/h", "00:00:15.437"), ("x/d", "00:00:15.537"),
                  ("p/s", "00:00:15.670"), ("p/h", "00:00:15.987"), ("p/d", "00:00:16.103"), ("f/k", "00:00:16.003"),
                  ("f/s", "00:00:16.270"), ("f/h", "00:00:16.453"), ("f/d", "00:00:16.587"), ("f/k", "00:00:17.603"),
                  ("f/s", "00:00:17.837"), ("f/h", "00:00:18.003"), ("f/d", "00:00:18.120"), ("x/k", "00:00:18.053"), 
                  ("x/s", "00:00:18.537"), ("x/h", "00:00:18.720"), ("x/d", "00:00:18.820"), ("f/k", "00:00:19.137"),
                  ("f/s", "00:00:19.420"), ("f/h", "00:00:19.620"), ("f/d", "00:00:19.787"), ("p/k", "00:00:20.488"),
                  ("f/k", "00:00:20.788"), ("p/s", "00:00:20.872"), ("f/s", "00:00:21.005"), ("p/h", "00:00:21.205"),
                  ("f/h", "00:00:21.238"), ("p/d", "00:00:21.322"), ("f/d", "00:00:21.405"), ("x/k", "00:00:21.255"),
                  ("x/s", "00:00:21.805"), ("x/h", "00:00:21.955"), ("x/d", "00:00:22.138"), ("f/k", "00:00:22.338"),
                  ("f/s", "00:00:22.555"), ("f/h", "00:00:22.788"), ("f/d", "00:00:22.955"), ("f/s", "00:00:24.138"),
                  ("f/h", "00:00:24.338"), ("f/d", "00:00:24.505"), ("x/s", "00:00:25.038"), ("x/h", "00:00:25.172"),
                  ("x/d", "00:00:25.338"), ("f/s", "00:00:25.722"), ("f/h", "00:00:25.955"), ("p/s", "00:00:26.005"),
                  ("f/d", "00:00:26.055"), ("p/h", "00:00:26.355"), ("p/d", "00:00:26.505"), ("f/s", "00:00:27.322"),
                  ("f/h", "00:00:27.505"), ("f/d", "00:00:27.605"), ("x/s", "00:00:28.323"), ("x/h", "00:00:28.490"),
                  ("x/d", "00:00:28.590"), ("f/s", "00:00:28.890"), ("f/h", "00:00:29.057"), ("f/d", "00:00:29.223"),
                  ("f/s", "00:00:30.457"), ("f/h", "00:00:30.640"), ("f/d", "00:00:30.857"), ("p/s", "00:00:31.173"),
                  ("p/h", "00:00:31.507"), ("p/d", "00:00:31.607"), ("x/s", "00:00:31.623"), ("x/h", "00:00:31.757"),
                  ("x/d", "00:00:31.923"), ("f/s", "00:00:32.057"), ("f/h", "00:00:32.290"), ("f/d", "00:00:32.390"),
                  ]],
}

class Video_Timestamps(NamedTuple):
    press_e: Ys_Timestamp
    chao_shi: Ys_Timestamp
    e_damage: Ys_Timestamp
    action_times: list[tuple[str, Ys_Timestamp]]


class Salon_Member_Action_Sequence:
    def __init__(self):
        self.action_seqs = []
        self.cur_seq = None
        self.cur_state = Initial_State(self)

    def set_action_time(self, action, t):
        if not self.cur_seq:
            self.cur_seq = {"k": null_timestamp, "s": null_timestamp, "h": null_timestamp, "d": null_timestamp}

        self.cur_seq[action] = t

    def finish_cur_seq(self):
        if self.cur_seq:
            self.action_seqs.append(self.cur_seq)
            self.cur_seq = None

    def do_action(self, action, t):
        self.cur_state = self.cur_state.do_action(action, t)


class Initial_State:
    def __init__(self, action_seq: Salon_Member_Action_Sequence):
        self.action_seq = action_seq

    def do_action(self, action, t):
        if 'k' == action:
            return Kou_Xue_State(self.action_seq, t)
        else:
            raise Exception(f"unknown action after initial state: {action} on {t}")


class Kou_Xue_State:
    def __init__(self, action_seq:Salon_Member_Action_Sequence, t):
        self.action_seq = action_seq

        action_seq.finish_cur_seq()
        action_seq.set_action_time('k', t)

    def do_action(self, action, t):
        if 's' == action:
            return Hit_Start_State(self.action_seq, t)
        elif 'h' == action:
            return Hit_State(self.action_seq, t)
        elif 'd' == action:
            return Damage_State(self.action_seq, t)
        elif 'k' == action:
            return Kou_Xue_State(self.action_seq, t)
        else:
            raise Exception(f"unknown salon member action: {action} on {t}")
        
class Hit_Start_State:
    def __init__(self, action_seq: Salon_Member_Action_Sequence, t):
        self.action_seq = action_seq
        action_seq.set_action_time('s', t)

    def do_action(self, action, t):
        # 有时被干扰看不到命中怪的时间，因此 hit start后可能是出伤
        # 但如果在命中前切白芙导致三小只消失，则“子弹”也会消失，也就没有出伤了
        if 'h' == action:
            return Hit_State(self.action_seq, t)
        elif 'd' == action:
            return Damage_State(self.action_seq, t)
        elif 'k' == action:
            return Kou_Xue_State(self.action_seq, t)
        else:
            raise Exception(f"unknown action after hit start: {action} on {t}")

class Hit_State:
    def __init__(self, action_seq: Salon_Member_Action_Sequence, t):
        self.action_seq = action_seq

        action_seq.set_action_time('h', t)
    
    def do_action(self, action, t):
        # 命中必有出伤
        if 'd' == action:
            return Damage_State(self.action_seq, t)
        else:
            raise Exception(f"unknown action after hit: {action} on {t}")
        

class Damage_State:
    def __init__(self, action_seq: Salon_Member_Action_Sequence, t):
        self.action_seq = action_seq

        action_seq.set_action_time('d', t)
        action_seq.finish_cur_seq()

    def do_action(self, action, t):
        # 如果角色生命值低于50%，视频中会观察不到扣血
        if 'k' == action:
            return Kou_Xue_State(self.action_seq, t)
        elif 's' == action:
            return Hit_Start_State(self.action_seq, t)
        elif 'h' == action:
            return Hit_State(self.action_seq, t)
        elif 'd' == action:
            return Damage_State(self.action_seq, t)
        else:
            raise Exception(f"unknown action after damage: {action} on {t}")

def get_salon_member_action_sequence(action_times):
    salon_member_action_sequences = {
        "f": Salon_Member_Action_Sequence(),
        "x": Salon_Member_Action_Sequence(),
        "p": Salon_Member_Action_Sequence()
    }

    for action, time in action_times:
        actions = action.split("/")
        members = actions[:-1]
        action = actions[-1]

        for m in members:
            salon_member_action_sequences[m].do_action(action, time)

    for action_seq in salon_member_action_sequences.values():
        action_seq.finish_cur_seq()

    return salon_member_action_sequences

def get_intervals(ys_timestamp_dict: dict[str, Video_Timestamps]):
    intervals_dict = {}
    for filename, t in ys_timestamp_dict.items():
        action_times = t.action_times

        salon_member_action_sequences = get_salon_member_action_sequence(action_times)
        
        intervals = {
            "点按e - e出伤": t.e_damage - t.press_e,
            '所有击中-出伤间隔': []
        }

        for sm, action_seq in salon_member_action_sequences.items():
            times = action_seq.action_seqs
            num_times = len(times)
            kou_xue_intervals = [times[i]["k"] - times[i-1]["k"] for i in range(1, num_times)]
            damage_intervals = [times[i]["d"] - times[i-1]["d"] for i in range(1, num_times)]
            hit_intervals = [times[i]["h"] - times[i-1]["h"] for i in range(1, num_times)]
            hit_durations = [t['h'] - t['s'] for t in times]
            hit_start_intervals = [times[i]["s"] - times[i-1]["s"] for i in range(1, num_times)]
            kou_xue_to_hit_start = [t['s'] - t['k'] for t in times]
            kou_xue_to_damage_intervals = [t["d"] - t["k"] for t in times]
            hit_to_damage_intervals = [t["d"] - t["h"] for t in times]
            damage_to_next_kou_xue = [times[i]['k'] - times[i - 1]['d'] for i in range(1, num_times)]

            if sm == "f":
                member_name = "夫人"
            elif sm == "x":
                member_name = "勋爵"
            else:
                member_name = "螃蟹"

            intervals[f"{member_name}扣血间隔"] = kou_xue_intervals
            intervals[f"{member_name}发动攻击间隔"] = hit_start_intervals
            intervals[f"{member_name}击中间隔"] = hit_intervals
            intervals[f"{member_name}出伤间隔"] = damage_intervals

            intervals[f"{member_name}扣血-出伤间隔"] = kou_xue_to_damage_intervals
            intervals[f"{member_name}扣血-发动攻击间隔"] = kou_xue_to_hit_start
            intervals[f"{member_name}发动攻击-击中时长"] = hit_durations
            intervals[f"{member_name}击中-出伤间隔"] = hit_to_damage_intervals
            intervals[f"{member_name}出伤-下一次扣血"] = damage_to_next_kou_xue
            intervals[f"{member_name}击中-下一次扣血"] = [times[i]['k'] - times[i - 1]['h'] for i in range(1, num_times)]
            intervals[f'所有击中-出伤间隔'].extend(hit_to_damage_intervals)

        intervals_dict[filename] = intervals
    
    return intervals_dict

def print_salon_member_sammary(td):
    return print_timestamps_summary(Video_Timestamps, td, get_intervals)

def print_single_salon_member_action_seq(action_seqs):
    s = ""
    num_seqs = len(action_seqs)
    for idx in range(0, num_seqs):
        seq = action_seqs[idx]

        ks_i = seq['s'] - seq['k']
        if ks_i is None:
            ks_i = 0

        sh_i = seq['h'] - seq['s']
        if sh_i is None:
            sh_i = 0
        hd_i = seq['d'] - seq['h']
        if hd_i is None:
            hd_i = 0
        
        s += f"{idx+1:2d}: k:{seq['k']} --{ks_i:.3f}--> s:{seq['s']} --{sh_i:.3f}--> h:{seq['h']} --{hd_i:.3f}--> d:{seq['d']}"
        if idx < num_seqs - 1:
            next_seq = action_seqs[idx + 1]

            hk_i = next_seq['k'] - seq['h']
            if hk_i is None:
                hk_i = 0

            dk_i = next_seq['k'] - seq['d']
            if dk_i is None:
                dk_i = 0
            s += f' --{hk_i:.3f}/{dk_i:.3f}-->\n'

            kk_i = next_seq['k'] - seq['k']
            if kk_i is None:
                kk_i = 0
            ss_i = next_seq['s'] - seq['s']
            if ss_i is None:
                ss_i = 0
            hh_i = next_seq['h'] - seq['h']
            if hh_i is None:
                hh_i = 0
            dd_i = next_seq['d'] - seq['d']
            if dd_i is None:
                dd_i = 0
            s += f'                  {kk_i:.3f}                                           {ss_i:.3f}                                          {hh_i:.3f}                                           {dd_i:.3f}\n'

    
    print(s)

def print_single_salon_member_timestamps(td, filename, member_name=None):
    parse_result, _ = generic_field_parser(td[filename])
    vt = Video_Timestamps(*parse_result)
    action_sequences = get_salon_member_action_sequence(vt.action_times)

    if not member_name:
        members = ['f', 'x', 'p']
    else:
        members = [member_name]

    for m in members:
        print(f"-----{filename}:{m}-----")
        print_single_salon_member_action_seq(action_sequences[m].action_seqs)


if __name__ == "__main__":
    print_salon_member_sammary(timestamp_dict)
    # print_single_salon_member_timestamps(timestamp_dict, 'BRYG1101', 'f')
