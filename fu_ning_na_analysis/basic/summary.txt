# 手法1：夜兰e 芙芙qeaa 万叶e  夜兰eq 芙芙zaaz，万叶e，夜兰eaaa......

第一刀：无任何加成
第二刀：专武一层
第三刀：41.7% 39.7%  39.9% 57.2%
第四刀：78.5%  47.7% 78.6% 57.2%
第五刀：82.8%  52.6%  87.9% 61.9%
第六刀：97.5% 57.5%  101.3%  96.5%

手法1的伤害构成：
q：无万叶增伤，有夜兰四命一次加成
e：无万叶增伤，有夜兰四命一次加成

夫人：无万叶增伤，有夜兰四命一次加成，256层
勋爵：无万叶增伤，有夜兰四命一次加成，256层
螃蟹：无万叶增伤，有夜兰四命一次加成，256层

夫人：专武叠满，有夜兰四命一次加成，350层
夫人：专武叠满，有夜兰四命二次加成，11%
勋爵：专武叠满，有夜兰四命二次加成，34%
夫人：专武叠满，有夜兰四命二次加成，41.9%，夜兰4.5%
《切白芙，砍四刀再切黑芙》
夫人：专武叠满，有夜兰四命二次加成，120%
螃蟹：专武叠满，有夜兰四命二次加成，140%
勋爵：专武叠满，有夜兰四命二次加成，140%
《夜兰第三个e》
夫人：专武叠满，有夜兰四命三次加成，140%
夫人：专武叠满，有夜兰四命三次加成，140%
勋爵：专武叠满，有夜兰四命三次加成，140%
夫人：专武叠满，有夜兰四命三次加成，140%
螃蟹：专武叠满，有夜兰四命三次加成，140%
夫人：专武叠满，有夜兰四命三次加成，140%
勋爵：专武叠满，有夜兰四命三次加成，140%
《芙芙大招效果消失》
夫人：专武叠满，有夜兰四命三次加成，芙芙大招效果消失
夫人：专武叠满，有夜兰四命三次加成，芙芙大招效果消失，万叶增伤失效
勋爵：专武叠满，有夜兰四命三次加成，芙芙大招效果消失，万叶增伤失效，减抗失效
螃蟹：专武叠满，有夜兰四命三次加成，芙芙大招效果消失，万叶增伤失效，减抗失效
夫人：专武叠满，有夜兰四命三次加成，芙芙大招效果消失，万叶增伤失效，减抗失效
夫人：专武叠满，有夜兰四命三次加成，芙芙大招效果消失，万叶增伤失效，减抗失效


## 手法2：芙芙q，万叶q，芙芙eaa 夜兰eqe，芙芙zaaz, 万叶e, 夜兰aaaeaa......

				ufzh5352     uiyo7432		awbw5598		wook8296
勋    爵：22.2%			18%				37.6%				18.3%
第三刀：45.8%			37.6%			37.6%				37.9%
第四刀：53.6%			49.5%			47.4%				37.9%
第五刀：54.8%			54.3%			53.3%				42.8%
第六刀：64.8%			75.9%			68.2%				48.9%
夫    人：120.4%		127.7%			111%					113.8%
螃    蟹：127.8%		140%				136.1%				121.3%
勋    爵：127.8%								136.1%				121.3%
夫    人：140%									140%					139.8%
夫    人：																			140%


q: 无任何增伤（也没有万叶的）
e: 万叶增伤

夫人：有万叶增伤，256层
勋爵：有万叶增伤，256层
螃蟹：有万叶增伤，256层

夫人：专武叠满，有夜兰四命一次加成，350层
夫人：专武叠满，有夜兰四命二次加成，11%
勋爵：专武叠满，有夜兰四命二次加成，22.2%

夫人：专武叠满，有夜兰四命二次加成，120.4%
勋爵：专武叠满，有夜兰四命二次加成，127.8%
螃蟹：专武叠满，有夜兰四命二次加成，127.8%
夫人：专武叠满，有夜兰四命二次加成，140%
夫人：专武叠满，有夜兰四命二次加成，140%

勋爵：专武叠满，有夜兰四命三次加成，140%
夫人：专武叠满，有夜兰四命三次加成，140%
螃蟹：专武叠满，有夜兰四命三次加成，140%

夫人：专武叠满，有夜兰四命三次加成，芙芙大招效果消失
勋爵：专武叠满，有夜兰四命三次加成，芙芙大招效果消失
夫人：专武叠满，有夜兰四命三次加成，芙芙大招效果消失

夫人：专武叠满，有夜兰四命三次加成，芙芙大招效果消失，万叶增伤失效
勋爵：专武叠满，有夜兰四命三次加成，芙芙大招效果消失，万叶增伤失效
螃蟹：专武叠满，有夜兰四命三次加成，芙芙大招效果消失，万叶增伤失效，减抗失效
夫人：专武叠满，有夜兰四命三次加成，芙芙大招效果消失，万叶增伤失效，减抗失效

## 三小只扣血时机研究

### 夫人

行动模式：攻击后会后退一些，达到一定距离后不会再后退

00:00:07.169：扣血
00:00:07.719：出伤 +0.55
00:00:08.802：扣血（可能提前一点）距离上次扣血+1.633
00:00:09.369：出伤 +0.567 距离上次出伤 +1.65
00:00:10.369：扣血（可能提前一点) +1.567
00:00:10.886：出伤 +0.517 +1.517
00:00:11.886：扣血 +1.517
00:00:12.604：出伤 +0.718 +1.718
00:00:13.487：扣血 +1.601
00:00:14.254：出伤 +0.767 +1.65
00:00:15.087：扣血 +1.6
00:00:15.737：出伤 +0.65 +1.483
00:00:16.654：扣血 +1.567
00:00:17.354：出伤 +0.7 +1.617
00:00:18.287：扣血 +1.633
00:00:18.937：出伤 +0.65 +1.583
00:00:19.754：扣血 +1.467
00:00:20.472：出伤 +0.718 +1.535

扣血间隔：1.633, 1.567, 1.517, 1.601, 1.6, 1.567, 1.633, 1.467
出伤-扣血间隔：0.55, 0.567, 0.517, 0.718, 0.767, 0.65, 0.7, 0.65, 0.718
出伤间隔：1.65, 1.517, 1.718, 1.65, 1.483, 1.617, 1.583, 1.535

---

00:00:06.627：扣血
00:00:07.076：出伤 +0.449
00:00:08.227：扣血 +1.6
00:00:08.761：出伤 +0.534 +1.685
00:00:09.877：扣血 +1.65
00:00:10.444：出伤 +0.567 +1.683
00:00:11.477：扣血 +1.6
00:00:11.979：出伤 +0.502 +1.535
00:00:12.912：扣血 +1.453
00:00:13.496：出伤 +0.584 +1.517
00:00:14.529：扣血 +1.617
00:00:15.129：出伤 +0.6 +1.633
00:00:16.079：扣血 +1.55
00:00:16.796：出伤 +0.717 +1.667
00:00:17.679：扣血 +1.6
00:00:18.346：出伤 +0.667 +1.55
00:00:19.279：扣血 +1.6
00:00:19.929：出伤 +0.65 +1.583

扣血间隔：1.6, 1.65, 1.6, 1.453, 1.617, 1.55, 1.6, 1.6
出伤-扣血间隔：0.449, 0.534, 0.567, 0.502, 0.584, 0.6, 0.717, 0.667, 0.65
出伤间隔：1.685, 1.683, 1.535, 1.517, 1.633, 1.667, 1.55, 1.583

从这两个案例来看，扣血间隔是相对比较稳定的，特别是第二个案例，1.6秒

### 勋爵

00:00:07.169：扣血
00:00:08.119：出伤 +0.95
00:00:10.436：扣血 +3.267
00:00:11.286：出伤 +0.85 +3.167
00:00:13.687：扣血 +3.251
00:00:14.687：出伤 +1 +3.401
00:00:17.054：扣血 +3.367
00:00:17.986：出伤 +0.932 +3.299
00:00:20.272：扣血 +3.218
00:00:21.139：出伤 +0.867 +3.153

扣血间隔：3.267, 3.251, 3.367,  3.218,
出伤-扣血间隔：0.95, 0.85, 1, 0.932, 0.867
出伤间隔：3.167, 3.401, 3.299, 3.153
---

00:00:06.644：扣血
00:00:07.561：出伤 +0.917
00:00:09.977：扣血 +3.333
00:00:10.861：出伤 +0.884 +3.3
00:00:13.312：扣血 +3.335
00:00:14.263：出伤 +0.951 +3.402
00:00:16.512：扣血 +3.2
00:00:17.446：出伤 +0.934 +3.183
00:00:19.762：扣血 +3.25
00:00:20.647：出伤 +0.885 +3.201

扣血间隔：3.333， 3.335， 3.2， 3.25
出伤-扣血间隔: 0.917, 0.884, 0.951, 0.934, 0.885
出伤间隔：3.3, 3.401, 3.183, 3.201

扣血间隔在3.2~3.333，相对较稳定

### 螃蟹

00:00:07.152：扣血
00:00:08.119：出伤 +0.967
00:00:12.404：扣血 +5.252
00:00:13.337：出伤 +0.933 +5.218
00:00:17.504：扣血 +5.1
00:00:18.537：出伤 +1.033 +5.2

扣血间隔：5.252， 5.1
出伤-扣血间隔：0.967, 0.933, 1.033
出伤间隔：5.218, 5.2
---

00:00:06.627：扣血
00:00:07.561：出伤 +0.934
00:00:11.794：扣血 +5.167
00:00:12.729：出伤 +0.935 +5.168
00:00:16.996：扣血 +5.202
00:00:17.929：出伤 +0.933 +5.2

扣血间隔：5.167, 5.202
出伤-扣血间隔：0.934, 0.935, 0.933
出伤间隔：5.168, 5.2

## 芙芙满命治疗特点

总结：其他三个角色先治疗，芙芙不论是在前台还是后台，都是最后治疗，落后0.066~0.2秒
从XQJA6856那个视频来看，即便是其他三个角色，也可能会分先后，但不论如何，芙芙永远是最后一个

算法：
- 到了治疗时间，通知其他三个角色治疗
- 其他三个角色治疗结束后，芙芙再治疗自身

00:00:07.102：第一刀
00:00:07.502：第二刀
00:00:08.119：第三刀

治疗持续时间：2.9 * 3 = 8.7秒，总计治疗了8次

00:00:08.302：其他三个角色治疗 +1.2
00:00:08.402：芙芙治疗 +0.1

00:00:09.236：其他三个角色治疗 +0.934
00:00:09.352：芙芙治疗 +0.116

00:00:10.302：其他三个角色治疗 +1.066
00:00:10.369：窗口期间扣血了，马上治疗

00:00:11.219：其他三个角色治疗 +0.917
00:00:11.386：芙芙治疗 +0.167

00:00:12.187：其他三个角色治疗 +0.968
00:00:12.304：芙芙治疗 +0.117

00:00:13.187：其他三个角色治疗 +1
00:00:13.337：芙芙治疗 +0.15

00:00:14.254：其他三个角色治疗 +1.067
00:00:14.337：芙芙治疗 +0.083

00:00:15.187：其他三个角色治疗 +0.933
00:00:15.287：芙芙治疗 +0.1

---

00:00:06.644：第一刀
00:00:07.044：第二刀
00:00:07.644：第三刀

00:00:07.861：其他三个角色治疗 +1.217
00:00:07.944：芙芙治疗 +0.083

00:00:08.861：其他三个角色治疗 +1
00:00:08.927：芙芙治疗 +0.066

00:00:09.894：即时治疗

00:00:10.761：其他三个角色治疗 avg+0.95
00:00:10.961：芙芙治疗 +0.2

00:00:11.811：其他三个角色治疗 +1.05
00:00:11.877：芙芙治疗 + 0.066

00:00:12.729：其他三个角色治疗 +0.918

00:00:13.679：其他三个角色治疗 +0.95
00:00:13.879：芙芙治疗 +0.2

00:00:14.729：其他三个角色治疗 +1.05
00:00:14.879：芙芙治疗 +0.15

特点：第一刀后1.2秒后开始治疗，再以后一秒治疗一次，前台似乎有着不一样的算法

## 芙芙生命值调整分析

血量调整线程大致是这样运行的：
 while True:
		data_packages = queue.get() # 一次性取出当前queue上所有的，并清空queue
		process data packages(会花费0.05~0.15秒的时间)
		sleep(0.5)

也就是说，不光有queue.get()，还有一个强制性的0.5秒等待，为什么要这样设计呢？难道是网络延迟？网越好的人会不会不用等0.5秒？
我怀疑气氛值也采用了类似的处理方式
			
其他会导致生命值上限变化的线程，例如：专武叠层，二命气氛值400以上
	将变化相关数据封包data_package
	queue.put(data_package)

00:00:05.686：芙芙点按e
00:00:07.152：专武叠一层，生命值+14%
00:00:07.236：生命值调整，专武叠一层生效
							 预测唤醒时间：7.152， +0.084
00:00:08.302：钟离加血，专武再叠一层+14%，专武生命值叠满了，queue.put(), 此时因为过去将近1秒了，线程阻塞在queue.get()上，queue.put()会唤醒线程
00:00:08.402：生命值调整
							 预测唤醒时间：8.302，+0.1
00:00:09.352：超400层了，触发二命效果
							 00:00:09.836时满层动画才开始，是否是因为在判断出满层后才触发二命效果？
00:00:09.886：生命值调整，9.886 - 9.352 = 0.534，9.886 - 9.836 = 0.05，下次调整时间：9.886 + 0.5 = 10.386左右
							 预测唤醒时间:9.836
00:00:10.302：钟离加血，queue.put()
00:00:10.369：夫人扣血，然后芙芙自身立即奶满【错过本轮调整】
00:00:10.436：勋爵扣血【错过本轮调整】
00:00:10.436：生命值调整，10.436 - 10.369 = 0.067，10.436 - 10.302 = 0.134   （按推论，线程可能在10.336就唤醒了, 线程唤醒到真正调整生命值有0.05~0.1秒的延迟
							  预测唤醒时间：10.336,  10.336 - 9.836 = 0.5
00:00:10.951：生命值调整，中间没有其他会触发生命值变化的因素，是sleep(0.5)后自动运行
							 预测唤醒时间：10.836， 10.951 - 10.836 = 0.115
00:00:11.219：其他三个角色治疗，queue.put()			11.219 - 10.951 = 0.268，才这么点时间，应该不足以唤醒正在 sleep(0.5)的线程
00:00:11.386：芙芙治疗【错过本轮调整】
00:00:11.486：生命值调整，因为11.219那次queue.put()不足以唤醒，那么线程是在sleep(0.5)之后自已运行的
							 预测唤醒时间：11.386,  11.386 - 10.836 = 0.55
00:00:11.886：夫人扣血【错过本轮调整】
00:00:11.97：生命值调整
							预测唤醒时间：11.87或11.886，11.87 - 11.386 = 0.484
00:00:12.187：其他三个角色治疗
00:00:12.304：芙芙治疗
00:00:12.404：螃蟹扣血【错过本轮调整】
00:00:12.487：生命值调整
							预测唤醒时间：12.386
00:00:13.038：生命值调整
							预测唤醒时间：12.886， 13.038 - 12.886 = 0.152，这时间有点长呀
00:00:13.187：其他三个角色治疗
00:00:13.337：芙芙治疗
00:00:13.487：生命值调整
							预测唤醒时间：13.387
00:00:13.687：勋爵扣血
00:00:13.97：生命值调整
							预测唤醒时间：13.887
00:00:14.254：其他三个角色治疗
00:00:14.337：芙芙治疗
00:00:14.487：生命值调整
							预测唤醒时间：14.387
00:00:15.087：夫人扣血
00:00:15.187：生命值调整
							预测唤醒时间：14.887，然后发现14.387~14.887期间没有血量变化，就queue.get()阻塞住了，直到15.087被唤醒
00:00:15.187：其他三个角色治疗，叠满了
00:00:15.687：生命值调整
							预测唤醒时间：15.587，正好对上上面分析得到的15.087被唤醒的

---

00:00:05.244：芙芙点按e
00:00:06.627：专武一层
00:00:06.711：生命值调整
							预测唤醒时间：6.627，6.711 - 6.627 = 0.084
00:00:07.861：专武二层
00:00:07.944：生命值调整
							预测唤醒时间：7.861, 7.944 - 7.861 = 0.083
00:00:08.927：超400层了
00:00:09.411：满层动画开始
00:00:09.511：生命值调整
							预测唤醒时间：9.411，+0.1
00:00:09.794：钟离加血
00:00:09.877：夫人扣血
00:00:09.894：芙芙治疗
00:00:09.977：勋爵扣血【错过本轮调整】
00:00:09.977：生命值调整:
							预测唤醒时间：9.911，+0.066
00:00:10.527：生命值调整
							预测唤醒时间：10.411，+0.116
00:00:10.761：其他三个角色治疗
00:00:10.961：芙芙治疗【错过本轮调整】
00:00:11.061：生命值调整
							预测唤醒时间：10.911，+0.15
00:00:11.477：夫人扣血【错过本轮调整】
00:00:11.561：生命值调整
							预测唤醒时间：11.411，+0.15
00:00:11.794：螃蟹扣血后台
00:00:11.811：螃蟹扣血前台
00:00:11.877：芙芙治疗
00:00:12.062：生命值调整
							预测唤醒时间：11.911，12.062 - 11.911 = 0.151
00:00:12.729：其他三个角色治疗
00:00:12.846：生命值调整
							预测唤醒时间：12.411，但那时没有血量变化，因此queue.get()阻塞住了，直到12.729唤醒，12.846  - 12.729 = 0.117
00:00:12.912：夫人扣血
00:00:13.312：勋爵扣血【错过本轮调整】
00:00:13.312：生命值调整
							预测唤醒时间: 13.229，+0.083
00:00:13.679：其他三个角色治疗
00:00:13.879：芙芙治疗【错过本轮调整】
00:00:13.879：生命值调整
							预测唤醒时间：13.729，+0.15
00:00:14.329：生命值调整
							预测唤醒时间：14.229，+0.1
00:00:14.529：夫人扣血，满层了
00:00:14.879：生命值调整
							预测唤醒时间：14.729， +0.15

## 芙芙气氛值调整分析

从视频分析的结果看，气氛值是有小数点的，不足1%的部分也会贡献气氛值











